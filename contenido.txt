== introduccion ==

1 pagina y media

== Definiciones ==

Definicione Preliminares- Fundamentos o Simil Por ejemplo podria ser como
es la placa que estarian adaptando

1 pagina y media

Poner como pone hellwig de que veritas file system no da documentacion.

== Metodologia ==
  ingenieria inversa

paper de hellwig
paper 133 del cacic

	- conociendo que hardware 

	- obteniendo el hardware
		comprar placa de desarrollo 
			usando esto viene listo para desarrollo, pero no se aprende y es costoso
		comprar un dispositivo linux
	- obteniendo acceso
		conseguir acceso a un shell
		conseguir acceso al momento de un reset boot
		serial
	- modificando la manera en que el dispositivo inicia el firmware en flash

	- instalando linux
	
== Testeos evaluacion Conclusiones ==
Testeos o Evaluacion (si los hubiera sino se pone en trabajos futuros.
"Entre nuestros trabajos futuros se encuentra testear el comportamiento del
.plin plin plin en un robot plum plum que se desenvuelva en tiempo real en
un ambiente dinámico bajo condiciones de .....")


Conclusion(un resumen de todo lo que presentaste particularmente si tienen
pruebas y testeos y los trabajos futuros)



Toasters, ovens, and dishwashers are a few
of the appliances found in our everyday
lives. Though we are quite familiar with their
use, few of us stop to think about how an appliance
works under the hood, or even what makes an appli-
ance, well, an appliance. This book defines an appliance
as a device designed to primarily perform a single function. If you think about
the appliances just mentioned, you’ll see that this definition holds true—
toasters toast, ovens bake, and dishwashers wash dishes. Compared to a PC,
which is capable of performing thousands of diverse functions depending on
the hardware and software installed, traditional appliances are boring and
simple.
What does this have to do with Linux? For starters, traditional appliances
are no longer so simple. What used to be electrified but still mechanical
devices, such as a vacuum cleaners, are now not only electronic, but include
processors, circuit boards, and sophisticated user interfaces. With these
changes comes the need to run an operating system on the appliance to
manage the new features. Linux is a natural fit for this because it is low cost
(in most cases, it is free to use) and open source (which means you can
modify it to better suit your needs). However, the real place where Linux
fits in is with the new types of appliances that are being designed. Digital
video recorders (DVRs) were unheard of just a few years ago, but the first
and most popular DVR appliance, the TiVo, runs on Linux, as do many
other home networking and entertainment appliances.
If you were to build the next great robotic house-cleaning system,
you’d want to avoid designing it completely from scratch. You’d reuse as
many parts as possible from your earlier robots, and you’d use off-the-shelf
components wherever possible. The same reuse mentality applies to Linux
appliances, and that’s where this book can help.


Existen decenas de dispositivos embebidos que utilizamos en la vida diaria.
Tostadoras, teléfonos móviles, heladeras, aspiradoras,
decodificadores de televisión, relojes, routers hogareños, consola de juegos, etc.
Y la mayoría de estos sistemas, a diferencia de una PC que puede
realizar miles de funciones diferentes, realizan una única función.
Esta única tarea define que nos encontramos ante sistemas embebidos (referencia).

Pero, estos artículos del hogar ya no son tan simples como antes. Algunos
años atrás, la mayor parte de estos dispositivos fueron únicamente mecánicos
y eléctricos. En cambio, hoy en día, la mayoría incluye placas
de circuitos electrónicos, sensores, microcontroladores, microprocesadores y
funcionalidades sofisticadas.

Esta complejidad trajo la necesidad de ejecutar un sistema operativo
dentro del dispositivo, ya
que se necesita administrar varias funcionalidades al mismo tiempo.
Y, en muchos casos, los fabricantes han optado por Linux, debido a su
bajo costo y su gran adaptabilidad (referencia electrolux brasil, celular android, router linux)

Si fuese necesario construir un sofisticado dispositivo robótico 
en nuestra realidad, reutilizariamos en lo posible, la mayor cantidad de partes de otros
trabajos previos, como así también componentes de hardware y software
preexistentes, que puedan adaptarse cuando y donde se necesite.

Existen decenas de dispositivos embebidos en el mercado regional,
que pueden adquirirse para su estudio. Y,
aunque muchas veces no se encuentren visiblemente etiquetados o documentados,
gran parte de estos sistemas contienen el hardware necesario
para ejecutar un sistema operativo Linux embebido. Ejemplos de estos dispositos
capaces de ejecutar un sistema Linux son el router TP-Link mr3020,
y los teléfonos móviles con androird.

El sistema embebido ENTC-1000 es un producto propietario de ENCORE Electronis Inc,
que funciona como una terminal de escritorio remoto, soportando
los protocolos RDP (Remote-Desktop-Protocol) y VNC. Aunque el folleto
comercial y su documentacion proveen especificaciones mínimas, 
se publicita como un sistema con Linux embebido kernel 2.4
No existe información adicional de la arquitectura o funcionamiento
interno del software. Tampoco provee, Encore Electronic Inc.,
el codigo fuente del software instalado, ni las instrucciones 
para su compilación e instalación (como es requerido por la licencia GPL de LInux - referencia).

Es de interés para nuestra facultad el entendimiento de la arquitectura y funcionamiento,
ya que se trata de un sistema embebido moderno, y disponible
para su adquisición en el país. Conociendo su funcionamiento interno 
nos permite obtener mayor conocimiento del tema,
posibilita la experimentación académica con Linux embebido, y
así tambien, su reuso para necesidades específicas en el marco
de los sitemas embebidos.





aunque mucho de ellos
Para poder hacer uso de Linux en un desarrollo o investigación de sistemas
embebidos, es necesario contar con hardware embebido que no se diseña y construye
facilmente (referencia carlos camargo). Linux es un sistema operativo que
necesita de, al menos, un microprocesador con arquitectura de 32bits soportada por el kernel (referencia kernel).

Existen al menos tres posibilidades para adquirir este tipo de
hardware embebido:

1- adquirir hardware y software especializado para desarrollo
2- adquirir un dispositivo embebido hogareño que tenga soporte
   por alguna distribución linux embebida
3- adaptar o adoptar un hardware embebido hogareño realizando ingenieria inversa

Una posibilidad es
adquirir hardware especializo embebido, que provea
las herramientas de desarrollo Linux necesarias para el hardware.
Esta posibilidad, tiene la ventaja de proveer un sistema
embebido genérico fácilmente adaptable a necesidades específicas.
Aunque, su desventaja principal es su costo (referencia a gta04
Alrededor de 500 euros cuesta un gta04). Tambien aparecieron
nuevos dispositivos economicos para este fin (por ej raspi). Pero 
son muy pocas las posibilidades de este tipo, y su adquisición
en la Argentina (el stock es muy limitado, la importacion importacion es compleja, los costos aduaneros
son elevados) por lo que, finalmente, la ventaja económica se pierde.

Otra posibilidad es la adopción o adaptación de hardware embebido
existente.

Definiciones Preliminares

Se puede comprar hardware embebido linux para desarrollo.


Se puede reutilizar hardware embebido linux comercial, utilizando dispositivos
existentes que sean soportados por alguna distribucion linux para embebidos.

La ultima opcion tiene al menos dos inconvenientes.
Primeramente, el hardware linux embebido comercial
tiene, usualmente, un tiempo de vida acotado. Esto se debe, principalmente,
a que se diseñan nuevos productos, o versiones mejoradas del producto que
se encuentre actualmente en el mercado. Una vez que los nuevos desarrollos son fabricados en maza
los productos anteriores dejan de fabricarse, y el stock se vuelve limitado.

Ademas, para que sea posible la utilización de una distribución linux
para embebidos, en un dispositivo comercial nuevo, se necesita
un tiempo de desarrollo y testing previo. En ese tiempo, los
programadores y colaboradores realizan las modificaciones necesarias 
al sistema de desarrollo que utilicen, que permita a sus distribuciones
dar soporte al nuevo hardware disponible.

Usualmente, este tiempo de desarrollo no puede comenzar antes de que el hardware
embebido esté públicamente disponible (en el mercado o como prototipos
de laboratorio), ya que es un poco habitual que los fabricantes
publiquen documentacion relativa al diseño del hardware en desarrollo.

debe por su naturaleza de desarrollo distribuido y colaborativo,
necesita un tiempo de desarrollo previo.hasta que
que sea factible su instalacion y utilización de manera estandarizada
y comprobada.

ov de manera estandarizada.



El sistema embebido ENTC-1000 es un producto propietario de ENCORE Electronis Inc,
que funciona como una terminal de escritorio remoto, soportando
los protocolos RDP (Remote-Desktop-Protocol) y VNC. Aunque el folleto
comercial y su documentacion proveen especificaciones mínimas, 
se publicita como un sistema con Linux embebido kernel 2.4
No existe información adicional de la arquitectura o funcionamiento
interno del software. Tampoco provee, Encore Electronic Inc.,
el codigo fuente del software instalado, ni las instrucciones 
para su compilación e instalación (como es requerido por la licencia GPL de LInux - referencia).

Es de interés para nuestra facultad el entendimiento de la arquitectura y funcionamiento,
ya que se trata de un sistema embebido moderno, y disponible
para su adquisición en el país. Conociendo su funcionamiento interno 
posibilita la experimentación académica con Linux embebido, como
así tambien, su reuso para necesidades específicas en el marco
de los sitemas embebidos.


Para entender el funcionamiento, es necesario, en primer lugar, conocer
la arquitectura. En un sistema embebido moderno la arquitectura
contiene como componente central, un microcontrolador o microprocesador (CPU).
Mas aún, actualmente, muchos sistemas contienen un SOC (del inglés ``system on chip''),
que contiene la CPU y gran parte de los componentes de un sistema embebido, en un
único chip (referencia).

Además, es de interés conocer que otros componentes conforman
el sistema. Los mas importantes, luego de conocer la CPU, 
son los módulos de memoria (de
tipo RAM y de tipo FLASH), y los módulos de comunicaciones (serial, usb, etc).
Ya que en conjunto con el microprocesador suelen dar una visión
global de como inicia o funciona el sistema.

En la práctica, la arquitectura de un sistema embebido particular puede conocerse desmontando
la placa del circuito impreso de la caja exterior. Esto posibilita
inspeccionar visualmente y listar todos los componentes principales con los
que está compuesto el sistema. A partir de este listado, puede
obtenerse, en la mayoría de los casos, la documentación pública
de cada uno de los componentes o chips listados.
A este tipo de documentación se conoce como hoja de datos, o 
en algunos casos (como el de las memorias o cpu) manuales de programación
del chip (referencia).

En nuestro caso de estudio, al desmontar el ENTC-1000, identificamos
un SOC Cirrus 3907A como el componente principal,
que contiene un procesador central de arquitectura ARM, modelo ARM920T
a una velocidad de 200Mhz.
Ademas, la placa presenta un modulo de memoria SDRAM de 64MB (colocar marca), y un modulo
de memoria FLASH de 16MB (colocar marca). 

Afortunadamente para nuestra investigación,
la empresa Cirrus publica documentacion detallada del SOC Cirrus 3907A. 
Tambien hemos encontrado en los repositorios del sitio web de Cirrus software
para su programación, y codigo fuente completo
Linux para experimentación. Completando la búsqueda, hemos encontrado
documentación de placas de laboratorios experimentales, que la fabrica Cirrus publica.
Estos diseños son muy útiles a las empresas que utilizan el SOC de Cirrus,
ya que lo pueden tomar como diseño base base para sus circuitos particulares.


Comunicación a nivel de software
Con toda esta documentación disponible, lo siguiente es 
Gkkkk
como del sistema operativo utilizado

	- conociendo que hardware 
